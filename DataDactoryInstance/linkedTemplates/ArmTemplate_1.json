{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Data Factory name",
			"defaultValue": "DataDactoryInstance"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/ds_Employees_DelimitedText')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Datasets ( Sections 1-9)/Section 9"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Employee.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Individual_Files')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"pFileName": {
						"type": "string"
					}
				},
				"folder": {
					"name": "Datasets ( Sections 1-9)/Section 9"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": {
							"value": "@dataset().pFileName",
							"type": "Expression"
						},
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_PaymentsDetailsOutput_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "PaymentsDetails.csv",
						"container": "result"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_Raw_Folder')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Datasets ( Sections 1-9)/Section 9"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_TemporaryOutput_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "CustomerOrderPayments.txt",
						"container": "result"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_result_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "customer.csv",
						"container": "result"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": []
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_customer_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Customers.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Customerslastname",
						"type": "String"
					},
					{
						"name": "Customersfirstname",
						"type": "String"
					},
					{
						"name": "CustomersCountry",
						"type": "String"
					},
					{
						"name": "Customersage",
						"type": "String"
					},
					{
						"name": "Customersgender",
						"type": "String"
					},
					{
						"name": "Customersemail",
						"type": "String"
					},
					{
						"name": "Customersprofession",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_orders_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Orders.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "customer_id",
						"type": "String"
					},
					{
						"name": "Store_id",
						"type": "String"
					},
					{
						"name": "Date",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ds_payments_txt')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "LS_AzureBlobStorage",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "Payments.csv",
						"container": "raw"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "order_id",
						"type": "String"
					},
					{
						"name": "payment_id",
						"type": "String"
					},
					{
						"name": "type",
						"type": "String"
					},
					{
						"name": "descriptions",
						"type": "String"
					},
					{
						"name": "pDate",
						"type": "String"
					},
					{
						"name": "Status",
						"type": "String"
					},
					{
						"name": "Details",
						"type": "String"
					},
					{
						"name": "Total_Invoice",
						"type": "String"
					},
					{
						"name": "Due_Amount",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/SCD_Type_1')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_AzureSqlDatabase_1",
								"type": "LinkedServiceReference"
							},
							"name": "sourceData"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureSqlDatabase_2",
								"type": "LinkedServiceReference"
							},
							"name": "destinationData"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_AzureSqlDatabase_2",
								"type": "LinkedServiceReference"
							},
							"name": "sinkData"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureSqlDatabase_2",
								"type": "LinkedServiceReference"
							},
							"name": "sinkData2"
						}
					],
					"transformations": [
						{
							"name": "ExistsOrNot1"
						},
						{
							"name": "ExistsOrNot2"
						},
						{
							"name": "alterRowData"
						}
					],
					"scriptLines": [
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'tbluser',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> sourceData",
						"source(output(",
						"          ID as integer,",
						"          Name as string,",
						"          Phone as string,",
						"          Last_m as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'userData',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> destinationData",
						"sourceData, destinationData exists(sourceData@ID == destinationData@ID,",
						"     negate:true,",
						"     broadcast: 'auto')~> ExistsOrNot1",
						"sourceData, destinationData exists(sourceData@ID == destinationData@ID,",
						"     negate:false,",
						"     broadcast: 'auto')~> ExistsOrNot2",
						"ExistsOrNot2 alterRow(updateIf(1==1)) ~> alterRowData",
						"ExistsOrNot1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'userData',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkData",
						"alterRowData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'table',",
						"     store: 'sqlserver',",
						"     schemaName: 'dbo',",
						"     tableName: 'userData',",
						"     insertable: true,",
						"     updateable: false,",
						"     deletable: false,",
						"     upsertable: false,",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError') ~> sinkData2"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/df_EmployeeSalesDetails')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SourceEmployee"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SourceDepartments"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SourceRegionData"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SourceSalesNA"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SourceSalesSA"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "SourceSalesEAA"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkSASalesCSV"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkNASalesCSV"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkEAASalesCSV"
						},
						{
							"linkedService": {
								"referenceName": "LS_AzureBlobStorage",
								"type": "LinkedServiceReference"
							},
							"name": "sinkTotalSalesYearCSV"
						}
					],
					"transformations": [
						{
							"name": "UnionSalesNASA"
						},
						{
							"name": "UnionSalesDataAll"
						},
						{
							"name": "UnPivotSalesData"
						},
						{
							"name": "derivedColumnSalesYear"
						},
						{
							"name": "EmployeeWithAdditionalColumns"
						},
						{
							"name": "removeUnessecarEmployeeColumns"
						},
						{
							"name": "SelectRelevantDepartmentFields"
						},
						{
							"name": "SelectRelevantRegionFields"
						},
						{
							"name": "LookupEmployeeDepartments"
						},
						{
							"name": "LookupEmployeeDepartmentsRegions"
						},
						{
							"name": "JoinEmployeeSalesData"
						},
						{
							"name": "RelevantEmployeeSalesFields"
						},
						{
							"name": "SummaryEmployeeSalesRegion"
						},
						{
							"name": "TotalSalesPerYear"
						},
						{
							"name": "splitByRegion"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Employee_id as integer,",
						"          store_id as string,",
						"          department_id as integer,",
						"          firstname as string,",
						"          lastname as string,",
						"          Country as string,",
						"          age as integer,",
						"          gender as string,",
						"          email as string,",
						"          phone as long",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Employee.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> SourceEmployee",
						"source(output(",
						"          department_id as integer,",
						"          Department as string,",
						"          Phone as integer,",
						"          Email as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Department.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> SourceDepartments",
						"source(output(",
						"          region_id as integer,",
						"          region as string",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Region.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> SourceRegionData",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Sales_NA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> SourceSalesNA",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Sales_SA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> SourceSalesSA",
						"source(output(",
						"          Employee_id as integer,",
						"          Sales_2018 as integer,",
						"          Sales_2019 as integer,",
						"          Sales_2020 as integer,",
						"          Sales_2021 as integer,",
						"          Sales_2022 as integer,",
						"          Sales_2023 as integer",
						"     ),",
						"     useSchema: false,",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     format: 'delimited',",
						"     container: 'raw',",
						"     fileName: 'Sales_EAA.csv',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true) ~> SourceSalesEAA",
						"SourceSalesNA, SourceSalesSA union(byName: true)~> UnionSalesNASA",
						"UnionSalesNASA, SourceSalesEAA union(byName: true)~> UnionSalesDataAll",
						"UnionSalesDataAll unpivot(output(",
						"          Year as string,",
						"          Sales as integer",
						"     ),",
						"     ungroupBy(Employee_id),",
						"     lateral: true,",
						"     ignoreNullPivots: false) ~> UnPivotSalesData",
						"UnPivotSalesData derive(Year = toInteger(right(Year,4))) ~> derivedColumnSalesYear",
						"SourceEmployee derive(Employee_Full_Name = firstname + ' '+ lastname,",
						"          Employee_Country = split(Country, ', ')[1],",
						"          Employee_Region_ID = toInteger(split(Country,', ')[2])) ~> EmployeeWithAdditionalColumns",
						"EmployeeWithAdditionalColumns select(mapColumn(",
						"          Employee_id,",
						"          department_id,",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_Region_ID",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> removeUnessecarEmployeeColumns",
						"SourceDepartments select(mapColumn(",
						"          department_id,",
						"          Department",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelevantDepartmentFields",
						"SourceRegionData select(mapColumn(",
						"          region_id,",
						"          region",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectRelevantRegionFields",
						"removeUnessecarEmployeeColumns, SourceDepartments lookup(removeUnessecarEmployeeColumns@department_id == SourceDepartments@department_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupEmployeeDepartments",
						"LookupEmployeeDepartments, SelectRelevantRegionFields lookup(Employee_Region_ID == region_id,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupEmployeeDepartmentsRegions",
						"LookupEmployeeDepartmentsRegions, derivedColumnSalesYear join(removeUnessecarEmployeeColumns@Employee_id == UnPivotSalesData@Employee_id,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEmployeeSalesData",
						"JoinEmployeeSalesData select(mapColumn(",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_Region = region,",
						"          Year,",
						"          Sales,",
						"          Employee_id = UnPivotSalesData@Employee_id",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RelevantEmployeeSalesFields",
						"RelevantEmployeeSalesFields aggregate(groupBy(Employee_id,",
						"          Employee_Full_Name,",
						"          Employee_Country,",
						"          Employee_Region),",
						"     Total_Sales = sum(Sales),",
						"          Max_Sales = max(Sales),",
						"          Min_Sales = min(Sales),",
						"          Avg_Sales = avg(Sales)) ~> SummaryEmployeeSalesRegion",
						"RelevantEmployeeSalesFields aggregate(groupBy(Employee_id,",
						"          Employee_Full_Name,",
						"          Year),",
						"     Total_Sales = sum(Sales),",
						"          Average_Sales = avg(Sales),",
						"          Max_Sales = max(Sales),",
						"          Min_Sales = min(Sales)) ~> TotalSalesPerYear",
						"SummaryEmployeeSalesRegion split(Employee_Region == 'South America',",
						"     Employee_Region == 'North America',",
						"     disjoint: false) ~> splitByRegion@(SummaryEmployeeSalesSA, SummaryEmployeeSalesNA, SummaryEmployeeSalesEAA)",
						"splitByRegion@SummaryEmployeeSalesSA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'result',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['SA_Sales.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkSASalesCSV",
						"splitByRegion@SummaryEmployeeSalesNA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'result',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: true,",
						"     partitionFileNames:['NA_Sales.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkNASalesCSV",
						"splitByRegion@SummaryEmployeeSalesEAA sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'result',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['EAA_Sales.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkEAASalesCSV",
						"TotalSalesPerYear sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'result',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:['Total_Sales_Year.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> sinkTotalSalesYearCSV"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Incremental copy')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy new and changed files",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"modifiedDatetimeStart": {
										"value": "@adddays(utcNow(), -2)",
										"type": "Expression"
									},
									"modifiedDatetimeEnd": {
										"value": "@utcnow()",
										"type": "Expression"
									},
									"wildcardFileName": "*.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Source_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Destination_Files",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "All pipelines ( Sections 1 - 9)/Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T19:28:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Pipeline_SCD_type_1')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Data flow1",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "SCD_Type_1",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"sourceData": {},
									"destinationData": {},
									"sinkData": {},
									"sinkData2": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T17:19:07Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/SCD_Type_1')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/full_load_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Full Load",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AzureSqlTable_Source_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AzureSqlTable_Output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T17:19:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/incremental_load_pipeline')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Last Updated Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "select [LastLoadDate] as LastLoadDate\nfrom [dbo].[tblControl]\n",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSqlTable_Control",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": true
						}
					},
					{
						"name": "Copy new data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Get Last Updated Date",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "Get Max Modified Date",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": {
									"value": "Select * from [dbo].[tbluser]\nWhere Last_m <= '@{activity('Get Max Modified Date').output.firstRow.Last_m}' and   Last_m >  '@{activity('Get Last Updated Date').output.firstRow.LastLoadDate}'",
									"type": "Expression"
								},
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"sink": {
								"type": "AzureSqlSink",
								"writeBehavior": "insert",
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_AzureSqlTable_Source_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_AzureSqlTable_Output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Update Control table",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "Copy new data",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[[dbo].[SPUpdateLoadInfo]",
							"storedProcedureParameters": {
								"ModifiedDate": {
									"value": {
										"value": "@{activity('Get Max Modified Date').output.firstRow.Last_m}",
										"type": "Expression"
									},
									"type": "Datetime"
								},
								"TableName": {
									"value": "tbluser",
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "LS_AzureSqlDatabase_1",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "Get Max Modified Date",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "Select max([Last_m]) as Last_m\nfrom [dbo].[tbluser]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSqlTable_Source_Data",
								"type": "DatasetReference",
								"parameters": {}
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T17:19:07Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelin_with_lookup')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Sales Details",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderQuery": "SELECT [Invoice_id],\n\t     [Cust_id],\n\t     [Year]\nFROM [dbo].[Sales_Details]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "All pipelines ( Sections 1 - 9)/Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T19:28:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_copy_activity')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copy data",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Check File",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DS_Sales_input",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "DS_Sales_output",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Check File",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_Sales_input",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"columnCount"
							],
							"storeSettings": {
								"type": "AzureBlobStorageReadSettings",
								"recursive": true,
								"enablePartitionDiscovery": false
							},
							"formatSettings": {
								"type": "DelimitedTextReadSettings"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-09-22T20:40:23Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_for_each_demo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Year",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[salesYear]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Year').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data SQL to Data Lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Salesin]",
											"storedProcedureParameters": {
												"Per_year": {
													"type": "Int32",
													"value": {
														"value": "@int(item().Year)",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AzureDataLake_CSV",
											"type": "DatasetReference",
											"parameters": {
												"pOutputFileName": {
													"value": "@concat('Sales_in',item().Year,'.csv')",
													"type": "Expression"
												}
											}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "All pipelines ( Sections 1 - 9)/Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T19:28:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_foreach_demo_with_item_in_dataset')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Lookup Year",
						"type": "Lookup",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "AzureSqlSource",
								"sqlReaderStoredProcedureName": "[[dbo].[salesYear]",
								"queryTimeout": "02:00:00",
								"partitionOption": "None"
							},
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"firstRowOnly": false
						}
					},
					{
						"name": "ForEach Year",
						"type": "ForEach",
						"dependsOn": [
							{
								"activity": "Lookup Year",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"userProperties": [],
						"typeProperties": {
							"items": {
								"value": "@activity('Lookup Year').output.value",
								"type": "Expression"
							},
							"isSequential": true,
							"activities": [
								{
									"name": "Copy data SQL to Data Lake",
									"type": "Copy",
									"dependsOn": [],
									"policy": {
										"timeout": "0.12:00:00",
										"retry": 0,
										"retryIntervalInSeconds": 30,
										"secureOutput": false,
										"secureInput": false
									},
									"userProperties": [],
									"typeProperties": {
										"source": {
											"type": "AzureSqlSource",
											"sqlReaderStoredProcedureName": "[[dbo].[Salesin]",
											"storedProcedureParameters": {
												"Per_year": {
													"type": "Int32",
													"value": {
														"value": "@int(item().Year)",
														"type": "Expression"
													}
												}
											},
											"queryTimeout": "02:00:00",
											"partitionOption": "None"
										},
										"sink": {
											"type": "DelimitedTextSink",
											"storeSettings": {
												"type": "AzureBlobFSWriteSettings"
											},
											"formatSettings": {
												"type": "DelimitedTextWriteSettings",
												"quoteAllText": true,
												"fileExtension": ".txt"
											}
										},
										"enableStaging": false,
										"translator": {
											"type": "TabularTranslator",
											"typeConversion": true,
											"typeConversionSettings": {
												"allowDataTruncation": true,
												"treatBooleanAsNumber": false
											}
										}
									},
									"inputs": [
										{
											"referenceName": "DS_AzureSqlTable",
											"type": "DatasetReference",
											"parameters": {}
										}
									],
									"outputs": [
										{
											"referenceName": "DS_AzureDataLake_CSV_with_item_expression",
											"type": "DatasetReference",
											"parameters": {}
										}
									]
								}
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "All pipelines ( Sections 1 - 9)/Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T19:28:12Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_get_metadata')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Get Metadata",
						"type": "GetMetadata",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataset": {
								"referenceName": "DS_AzureSqlTable",
								"type": "DatasetReference",
								"parameters": {}
							},
							"fieldList": [
								"exists",
								"structure",
								"columnCount"
							]
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"folder": {
					"name": "All pipelines ( Sections 1 - 9)/Section 9"
				},
				"annotations": [],
				"lastPublishTime": "2023-09-20T19:28:12Z"
			},
			"dependsOn": []
		}
	]
}