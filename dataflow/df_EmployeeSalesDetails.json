{
	"name": "df_EmployeeSalesDetails",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "SourceEmployee"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "SourceDepartments"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "SourceRegionData"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "SourceSalesNA"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "SourceSalesSA"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "SourceSalesEAA"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkSASalesCSV"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkNASalesCSV"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkEAASalesCSV"
				},
				{
					"linkedService": {
						"referenceName": "LS_AzureBlobStorage",
						"type": "LinkedServiceReference"
					},
					"name": "sinkTotalSalesYearCSV"
				}
			],
			"transformations": [
				{
					"name": "UnionSalesNASA"
				},
				{
					"name": "UnionSalesDataAll"
				},
				{
					"name": "UnPivotSalesData"
				},
				{
					"name": "derivedColumnSalesYear"
				},
				{
					"name": "EmployeeWithAdditionalColumns"
				},
				{
					"name": "removeUnessecarEmployeeColumns"
				},
				{
					"name": "SelectRelevantDepartmentFields"
				},
				{
					"name": "SelectRelevantRegionFields"
				},
				{
					"name": "LookupEmployeeDepartments"
				},
				{
					"name": "LookupEmployeeDepartmentsRegions"
				},
				{
					"name": "JoinEmployeeSalesData"
				},
				{
					"name": "RelevantEmployeeSalesFields"
				},
				{
					"name": "SummaryEmployeeSalesRegion"
				},
				{
					"name": "TotalSalesPerYear"
				},
				{
					"name": "splitByRegion"
				}
			],
			"scriptLines": [
				"source(output(",
				"          Employee_id as integer,",
				"          store_id as string,",
				"          department_id as integer,",
				"          firstname as string,",
				"          lastname as string,",
				"          Country as string,",
				"          age as integer,",
				"          gender as string,",
				"          email as string,",
				"          phone as long",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'raw',",
				"     fileName: 'Employee.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> SourceEmployee",
				"source(output(",
				"          department_id as integer,",
				"          Department as string,",
				"          Phone as integer,",
				"          Email as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'raw',",
				"     fileName: 'Department.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> SourceDepartments",
				"source(output(",
				"          region_id as integer,",
				"          region as string",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'raw',",
				"     fileName: 'Region.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> SourceRegionData",
				"source(output(",
				"          Employee_id as integer,",
				"          Sales_2018 as integer,",
				"          Sales_2019 as integer,",
				"          Sales_2020 as integer,",
				"          Sales_2021 as integer,",
				"          Sales_2022 as integer,",
				"          Sales_2023 as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'raw',",
				"     fileName: 'Sales_NA.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> SourceSalesNA",
				"source(output(",
				"          Employee_id as integer,",
				"          Sales_2018 as integer,",
				"          Sales_2019 as integer,",
				"          Sales_2020 as integer,",
				"          Sales_2021 as integer,",
				"          Sales_2022 as integer,",
				"          Sales_2023 as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'raw',",
				"     fileName: 'Sales_SA.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> SourceSalesSA",
				"source(output(",
				"          Employee_id as integer,",
				"          Sales_2018 as integer,",
				"          Sales_2019 as integer,",
				"          Sales_2020 as integer,",
				"          Sales_2021 as integer,",
				"          Sales_2022 as integer,",
				"          Sales_2023 as integer",
				"     ),",
				"     useSchema: false,",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delimited',",
				"     container: 'raw',",
				"     fileName: 'Sales_EAA.csv',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true) ~> SourceSalesEAA",
				"SourceSalesNA, SourceSalesSA union(byName: true)~> UnionSalesNASA",
				"UnionSalesNASA, SourceSalesEAA union(byName: true)~> UnionSalesDataAll",
				"UnionSalesDataAll unpivot(output(",
				"          Year as string,",
				"          Sales as integer",
				"     ),",
				"     ungroupBy(Employee_id),",
				"     lateral: true,",
				"     ignoreNullPivots: false) ~> UnPivotSalesData",
				"UnPivotSalesData derive(Year = toInteger(right(Year,4))) ~> derivedColumnSalesYear",
				"SourceEmployee derive(Employee_Full_Name = firstname + ' '+ lastname,",
				"          Employee_Country = split(Country, ', ')[1],",
				"          Employee_Region_ID = toInteger(split(Country,', ')[2])) ~> EmployeeWithAdditionalColumns",
				"EmployeeWithAdditionalColumns select(mapColumn(",
				"          Employee_id,",
				"          department_id,",
				"          Employee_Full_Name,",
				"          Employee_Country,",
				"          Employee_Region_ID",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> removeUnessecarEmployeeColumns",
				"SourceDepartments select(mapColumn(",
				"          department_id,",
				"          Department",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantDepartmentFields",
				"SourceRegionData select(mapColumn(",
				"          region_id,",
				"          region",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> SelectRelevantRegionFields",
				"removeUnessecarEmployeeColumns, SourceDepartments lookup(removeUnessecarEmployeeColumns@department_id == SourceDepartments@department_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupEmployeeDepartments",
				"LookupEmployeeDepartments, SelectRelevantRegionFields lookup(Employee_Region_ID == region_id,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupEmployeeDepartmentsRegions",
				"LookupEmployeeDepartmentsRegions, derivedColumnSalesYear join(removeUnessecarEmployeeColumns@Employee_id == UnPivotSalesData@Employee_id,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> JoinEmployeeSalesData",
				"JoinEmployeeSalesData select(mapColumn(",
				"          Employee_Full_Name,",
				"          Employee_Country,",
				"          Employee_Region = region,",
				"          Year,",
				"          Sales,",
				"          Employee_id = UnPivotSalesData@Employee_id",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RelevantEmployeeSalesFields",
				"RelevantEmployeeSalesFields aggregate(groupBy(Employee_id,",
				"          Employee_Full_Name,",
				"          Employee_Country,",
				"          Employee_Region),",
				"     Total_Sales = sum(Sales),",
				"          Max_Sales = max(Sales),",
				"          Min_Sales = min(Sales),",
				"          Avg_Sales = avg(Sales)) ~> SummaryEmployeeSalesRegion",
				"RelevantEmployeeSalesFields aggregate(groupBy(Employee_id,",
				"          Employee_Full_Name,",
				"          Year),",
				"     Total_Sales = sum(Sales),",
				"          Average_Sales = avg(Sales),",
				"          Max_Sales = max(Sales),",
				"          Min_Sales = min(Sales)) ~> TotalSalesPerYear",
				"SummaryEmployeeSalesRegion split(Employee_Region == 'South America',",
				"     Employee_Region == 'North America',",
				"     disjoint: false) ~> splitByRegion@(SummaryEmployeeSalesSA, SummaryEmployeeSalesNA, SummaryEmployeeSalesEAA)",
				"splitByRegion@SummaryEmployeeSalesSA sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'result',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['SA_Sales.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkSASalesCSV",
				"splitByRegion@SummaryEmployeeSalesNA sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'result',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: true,",
				"     partitionFileNames:['NA_Sales.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkNASalesCSV",
				"splitByRegion@SummaryEmployeeSalesEAA sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'result',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:['EAA_Sales.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkEAASalesCSV",
				"TotalSalesPerYear sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'result',",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:['Total_Sales_Year.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sinkTotalSalesYearCSV"
			]
		}
	}
}